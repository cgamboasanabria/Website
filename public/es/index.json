[{"authors":["admin"],"categories":null,"content":"Nacido en San José, Costa Rica en 1989, César Gamboa es un Estadístico egresado de la Escuela de Estadística de la Universidad de Costa Rica. Profesor universitario de Probabilidad y Estadística, además de programación en el lenguaje R, es también un investigador de temas demográficos dedicado a la utilización de algoritmos para la optimización de procesos y el análisis por medio de simulaciones computacionales.\nReconocido por su capacidad de análisis estadístico, manejo de distintos software y lenguajes de programación para análisis de datos como R, Python, Git, o Unix. Versatil para la automatización de procesos mediante algoritmos especializados, capacidad analítica y matemática y gran facilidad para el aprendizaje de forma autodidacta.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"es","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/es/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/es/authors/admin/","section":"authors","summary":"Nacido en San José, Costa Rica en 1989, César Gamboa es un Estadístico egresado de la Escuela de Estadística de la Universidad de Costa Rica. Profesor universitario de Probabilidad y Estadística, además de programación en el lenguaje R, es también un investigador de temas demográficos dedicado a la utilización de algoritmos para la optimización de procesos y el análisis por medio de simulaciones computacionales.\nReconocido por su capacidad de análisis estadístico, manejo de distintos software y lenguajes de programación para análisis de datos como R, Python, Git, o Unix.","tags":null,"title":"César Gamboa Sanabria","type":"authors"},{"authors":["César Gamboa Sanabria"],"categories":["Fundamentos de R"],"content":"\rLa familia de funciones apply pertenecen al paquete base de R, son de especial utilidad al combinar su uso con funciones para manipular porciones de matrices, arreglos, listas y marcos de datos de una manera repetitiva. Estas funciones permiten cruzar los datos de múltiples maneras para así evadir el uso de ciclos que usualmente son computacionalmente más pesados.\nLa primera función de la que hablaremos en esta serie es la función apply(), la cual en su forma de utilización más sencilla se utiliza para evaluar sobre los márgenes (1=filas ó 2=columnas) de un arreglo o una matriz para aplicar una función a las mismas.\nComo primer ejemplo se parte de una matriz con tres filas y tres columnas.\nmat \u0026lt;- matrix(c(2, 4, 6, 7, 8, 9, 1, 12, 21), nrow = 3, ncol = 3)\rmat\r## [,1] [,2] [,3]\r## [1,] 2 7 1\r## [2,] 4 8 12\r## [3,] 6 9 21\rSi se desea, por ejemplo, obtener la suma de cada columna puede usarse la función apply() de la siguiente manera.\napply(mat, 2, sum)\r## [1] 12 24 34\rO bien, puede calcularse si se desea el promedio de cada una de las filas.\napply(mat, 1, mean)\r## [1] 3.333333 8.000000 12.000000\rExisten además algunas funciones ya programadas en el paquete base de R que replican rápidamente los resultados anteriores. Por ejemplo está la función colSums() para calcular la cuma de cada columna, y rowMeans() para obtener la media aritmética de cada fila.\ncolSums(mat)\r## [1] 12 24 34\rrowMeans(mat)\r## [1] 3.333333 8.000000 12.000000\rLos dos casos mostrados anteriormente ejemplifican un uso básico de la función apply(), sin embargo, esta función es mucho más potente y es capaz de trabajar de manera multidimensional. Consideremos, por ejemplo, un objeto en dos dimensiones (filas y columnas) similar al creado con anterioridad, es decir, una matriz.\nmat2 \u0026lt;- matrix(1:9, nrow = 3, ncol = 3)\rmat2\r## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\rEl objeto mat2 representa un caso particular de lo que en R se conoce como arreglos, los cuales pueden ser creados mediante la función array().\narray(data=1:9, dim = c(3,3))\r## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\rLa función array() también permite agregar etiquetas a las filas y las columnas mediante su argumento dimnames.\nnombres.columnas \u0026lt;- c(\u0026quot;COL1\u0026quot;,\u0026quot;COL2\u0026quot;,\u0026quot;COL3\u0026quot;)\rnombres.filas \u0026lt;- c(\u0026quot;FILA1\u0026quot;,\u0026quot;FILA2\u0026quot;,\u0026quot;FILA3\u0026quot;)\rarreglo \u0026lt;- array(data=1:9, dim = c(3,3), dimnames = list(nombres.columnas, nombres.filas))\rarreglo\r## FILA1 FILA2 FILA3\r## COL1 1 4 7\r## COL2 2 5 8\r## COL3 3 6 9\rPueden agregarse varias dimensiones a los arreglos. Para esto, supongamos que se desean tener las siguientes dimensiones:\n\rDIM1: Números del 1 al 9.\rDIM2: Números del 1 al 9 multiplicados por 10.\rDIM3: Números del 1 al 9 multiplicados por 100.\rDIM4: Números del 1 al 9 multiplicados por 1000.\r\rUna forma de generar el arreglo anterior es mediante el siguiente código:\nnombres.dimensiones \u0026lt;- c(\u0026quot;DIM1\u0026quot;,\u0026quot;DIM2\u0026quot;,\u0026quot;DIM3\u0026quot;,\u0026quot;DIM4\u0026quot;)\rarreglo \u0026lt;- array(data = c(seq(from=1, to=9, by=1), #1 al 9\rseq(from=10, to=90, by=10), #10 al 90\rseq(from=100, to=900, by=100), #100 al 900\rseq(from=1000, to=9000, by=1000)), #1000 al 9000\rdim = c(3, 3, 4), #3 filas, 3 columnas y 4 dimensiones\rdimnames = list(nombres.filas,\rnombres.columnas,\rnombres.dimensiones))\rarreglo\r## , , DIM1\r## ## COL1 COL2 COL3\r## FILA1 1 4 7\r## FILA2 2 5 8\r## FILA3 3 6 9\r## ## , , DIM2\r## ## COL1 COL2 COL3\r## FILA1 10 40 70\r## FILA2 20 50 80\r## FILA3 30 60 90\r## ## , , DIM3\r## ## COL1 COL2 COL3\r## FILA1 100 400 700\r## FILA2 200 500 800\r## FILA3 300 600 900\r## ## , , DIM4\r## ## COL1 COL2 COL3\r## FILA1 1000 4000 7000\r## FILA2 2000 5000 8000\r## FILA3 3000 6000 9000\rPartiendo del arreglo anterior, supongamos que se desea obtener de cada dimensión el valor máximo por filas.\napply(arreglo, c(3,1), max)\r## FILA1 FILA2 FILA3\r## DIM1 7 8 9\r## DIM2 70 80 90\r## DIM3 700 800 900\r## DIM4 7000 8000 9000\rO bien, quizás interese obtener de cada dimensión el valor máximo de cada columna.\napply(arreglo, c(3,2), max)\r## COL1 COL2 COL3\r## DIM1 3 6 9\r## DIM2 30 60 90\r## DIM3 300 600 900\r## DIM4 3000 6000 9000\rEl siguiente resultado muestra el mínimo de cada columna en cada dimensión.\napply(arreglo, c(2,3), min)\r## DIM1 DIM2 DIM3 DIM4\r## COL1 1 10 100 1000\r## COL2 4 40 400 4000\r## COL3 7 70 700 7000\rLos ejemplos anteriores pueden ser aplicados a un número mayor de dimensiones, para ello basta con tener un arreglo adecuado y operar sobre los márgenes correspondientes con la función apply().\n","date":1563752529,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1563752529,"objectID":"efeebc86a8281ce829d5fdf2cc289855","permalink":"/es/post/2019-06-23-apply/","publishdate":"2019-07-21T17:42:09-06:00","relpermalink":"/es/post/2019-06-23-apply/","section":"post","summary":"Se muestran ejemplos de uso de la función apply","tags":["R","RStudio","Funciones apply","apply"],"title":"Familia de funciones apply - Parte 1","type":"post"},{"authors":[],"categories":null,"content":"","date":1563296400,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1563296400,"objectID":"00b35e0c03be0db2559b7f397190efd9","permalink":"/es/talk/cursor201906/","publishdate":"2019-07-16T17:00:00Z","relpermalink":"/es/talk/cursor201906/","section":"talk","summary":"Este curso se compone de dieciséis horas distribuidas en cuatro sesiones de cuatro horas cada una.  El propósito del curso es proporcionar al estudiante un punto de partida para comenzar a utilizar de forma básica el lenguaje de programación R. Mediante el uso de este lenguaje el estudiante podrá leer y crear datos, manipular objetos, generar distintos tipos de visualización de datos y obtener estadísticos básicos.","tags":[],"title":"Programación estadística en R","type":"talk"},{"authors":[],"categories":null,"content":"","date":1561629600,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1561629600,"objectID":"5a3f2b7f0342293c5b7d091e1ba8ebd3","permalink":"/es/talk/conversatorior/","publishdate":"2019-06-23T00:00:00Z","relpermalink":"/es/talk/conversatorior/","section":"talk","summary":"La Escuela de Estadística tiene el agrado de invitarle a las siguientes charlas y talleres gratuitos que impartirá el Ing Ruiz de R Studio Inc del 24 al 27 de junio de 2019.","tags":[],"title":"Uso de R como herramienta de análisis estadístico","type":"talk"},{"authors":["César Gamboa Sanabria"],"categories":["Análisis exploratorio"],"content":"\rEs muy común en el día a día encontrarse con bases de datos que cuentan con diferentes tipos de variables, ya sean numéricas, temporales, de texto o categóricas. Estas últimas son el tema de discusión de este post. El paquete inspectdf ofrece un conjunto de funciones que resultan particularmente útiles cuando lo que se busca es explorar el comportamiento de este tipo de variables.\nEl primer paso es tener debidamente instalado el paquete inspectdf.\nlibrary(devtools)\rinstall_github(\u0026quot;alastairrushworth/inspectdf\u0026quot;)\rUna vez instalado es necesario cargarlo, así como cargar también el paquete dplyr, especialmente para poder usar el operador %\u0026gt;%.\nlibrary(inspectdf)\rlibrary(dplyr)\rPara este ejemplo se utilizará la base de datos starwars, la cual viene incluida en el paquete dplyr y que cuenta con datos de varios personajes de este universo cinematográfico.\nstarwars %\u0026gt;% head()\r## # A tibble: 6 x 13\r## name height mass hair_color skin_color eye_color birth_year gender\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 Luke~ 172 77 blond fair blue 19 male ## 2 C-3PO 167 75 \u0026lt;NA\u0026gt; gold yellow 112 \u0026lt;NA\u0026gt; ## 3 R2-D2 96 32 \u0026lt;NA\u0026gt; white, bl~ red 33 \u0026lt;NA\u0026gt; ## 4 Dart~ 202 136 none white yellow 41.9 male ## 5 Leia~ 150 49 brown light brown 19 female\r## 6 Owen~ 178 120 brown, gr~ light blue 52 male ## # ... with 5 more variables: homeworld \u0026lt;chr\u0026gt;, species \u0026lt;chr\u0026gt;, films \u0026lt;list\u0026gt;,\r## # vehicles \u0026lt;list\u0026gt;, starships \u0026lt;list\u0026gt;\rAnálisis exploratorio de manera tabular\rEL paquete inspectdf permite calcular algunos estadísticos descriptivos rápidamente para cualquier tipo de variable mediante la función inspect_types().\nstarwars %\u0026gt;% inspect_types()\r## # A tibble: 4 x 4\r## type cnt pcnt col_name ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 character 7 53.8 \u0026lt;chr [7]\u0026gt;\r## 2 list 3 23.1 \u0026lt;chr [3]\u0026gt;\r## 3 numeric 2 15.4 \u0026lt;chr [2]\u0026gt;\r## 4 integer 1 7.69 \u0026lt;chr [1]\u0026gt;\rEl resultado anterior muestra que hay 7 variables de tipo character, lo cual representa el 53.84% de la base de datos. Además, hay dos variables de tipo numérico, que representa un 15.38% del total. Lo anterior es útil para un primer vistazo, pero resulta interesante ir un poco más allá y describir más en detalle todas las variables. Para esto puede usarse la función inspect_cat().\nstarwars %\u0026gt;% inspect_cat()\r## # A tibble: 7 x 5\r## col_name cnt common common_pcnt levels ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 eye_color 15 brown 24.1 \u0026lt;tibble [15 x 3]\u0026gt;\r## 2 gender 5 male 71.3 \u0026lt;tibble [5 x 3]\u0026gt; ## 3 hair_color 13 none 42.5 \u0026lt;tibble [13 x 3]\u0026gt;\r## 4 homeworld 49 Naboo 12.6 \u0026lt;tibble [49 x 3]\u0026gt;\r## 5 name 87 Ackbar 1.15 \u0026lt;tibble [87 x 3]\u0026gt;\r## 6 skin_color 31 fair 19.5 \u0026lt;tibble [31 x 3]\u0026gt;\r## 7 species 38 Human 40.2 \u0026lt;tibble [38 x 3]\u0026gt;\rLa función inspect_cat() muestra en la primera columna el nombre de la variable, en la segunda la cantidad de valores únicos que contiene, es decir, la variable eye_color tiene 15 niveles diferentes, o lo que es lo mismo, hay 15 colores e ojos diferentes en la base de datos. La tercera columna muestra el valor más común que aparece en la variable, por ejemplo, la especie más común que aparece en la base de datos son los humanos. La cuarta columna indica el porcentaje que representa el nivel más común, por ejemplo, los ojos color café representan el 24.13% de todos los colores presentes en los datos. ¿Y qué representa la quinta columna? Pues es una lista con las proporciones de cada nivel de la variable. Para ejemplificar esto último, se asignará al objeto df el resultado anterior.\ndf \u0026lt;- starwars %\u0026gt;% inspect_cat()\rdf$levels$eye_color\r## # A tibble: 15 x 3\r## value prop cnt\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 brown 0.241 21\r## 2 blue 0.218 19\r## 3 yellow 0.126 11\r## 4 black 0.115 10\r## 5 orange 0.0920 8\r## 6 red 0.0575 5\r## 7 hazel 0.0345 3\r## 8 unknown 0.0345 3\r## 9 blue-gray 0.0115 1\r## 10 dark 0.0115 1\r## 11 gold 0.0115 1\r## 12 green, yellow 0.0115 1\r## 13 pink 0.0115 1\r## 14 red, blue 0.0115 1\r## 15 white 0.0115 1\rLa tabla anterior muestra la proporción de cada color de ojos. Esto mismo se aplica a cualquiera de las otras variables.\n\rAnálisis exploratorio de manera gráfica\rEn algunas ocasiones los valores numéricos no sean tan claros ni fáciles de interpretar, ya sea por a cantidad de datos o bien por cuestiones de comodidad. El paquete inspectdf también permite hacer análisis exploratorio de manera gráfica\ndf %\u0026gt;% show_plot()\rEste resultado contiene la misma información que el objeto df, pero ahora es más fácil, rápido e incluso agradable para interpretar. Sin embargo, este resultado puede mejorar, pues por ejemplo la variable name no sirve de mucho en el gráfico porque todos los nombres son diferentes. Esto se puede solucionar modificando el argumento high_cardinality, lo cual hace que únicamente se grafiquen todas aquellas categorías que aparezcan un determinado número de veces, digamos cuatro.\ndf %\u0026gt;% show_plot(high_cardinality = 4)\rFinalmente, si los colores no resultan del todo agradables, pueden manipularse a voluntad mediante las 5 paletas de colores que ofrece el paquete y que e el futuro serán más, basta modificar el argumento col_palette con los números entre uno y cinco para lograr esto.\ndf %\u0026gt;% show_plot(high_cardinality = 4, col_palette = 4)\rdf %\u0026gt;% show_plot(high_cardinality = 4, col_palette = 5)\r\r","date":1561318929,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1561318929,"objectID":"510550bc8ea3cd0c8be33b7eaa853538","permalink":"/es/post/2019-06-23-exploraci%C3%B3n-de-datos-categ%C3%B3ricos-con-el-paquete-inspectdf/","publishdate":"2019-06-23T13:42:09-06:00","relpermalink":"/es/post/2019-06-23-exploraci%C3%B3n-de-datos-categ%C3%B3ricos-con-el-paquete-inspectdf/","section":"post","summary":"Este post presenta el paquete inspectdf como herramienta para el análisis exploratorio de datos categóricos","tags":["R","RStudio","Análisis exploratorio","Descripivos","Datos categóricos"],"title":"Análisis exploratorio de datos categóricos","type":"post"},{"authors":null,"categories":null,"content":"This is a \u0026ldquo;hello world\u0026rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.\n","date":1462510131,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1462510131,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"/es/about/","publishdate":"2016-05-05T21:48:51-07:00","relpermalink":"/es/about/","section":"","summary":"This is a \u0026ldquo;hello world\u0026rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.","tags":null,"title":"About","type":"page"}]