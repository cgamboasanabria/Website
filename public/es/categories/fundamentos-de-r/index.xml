<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fundamentos de R on </title>
    <link>/es/categories/fundamentos-de-r/</link>
    <description>Recent content in Fundamentos de R on </description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>es-cr</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Mon, 22 Jul 2019 17:42:09 -0600</lastBuildDate>
    
	    <atom:link href="/es/categories/fundamentos-de-r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Familia de funciones apply - Parte 1</title>
      <link>/es/post/post2/2019-06-23-apply/</link>
      <pubDate>Mon, 22 Jul 2019 17:42:09 -0600</pubDate>
      
      <guid>/es/post/post2/2019-06-23-apply/</guid>
      <description>


&lt;p&gt;La familia de funciones apply pertenecen al paquete base de R, son de especial utilidad al combinar su uso con funciones para manipular porciones de matrices, arreglos, listas y marcos de datos de una manera repetitiva. Estas funciones permiten cruzar los datos de múltiples maneras para así evadir el uso de ciclos que usualmente son computacionalmente más pesados.&lt;/p&gt;
&lt;p&gt;La primera función de la que hablaremos en esta serie es la función &lt;code&gt;apply()&lt;/code&gt;, la cual en su forma de utilización más sencilla se utiliza para evaluar sobre los márgenes (1=filas ó 2=columnas) de un arreglo o una matriz para aplicar una función a las mismas.&lt;/p&gt;
&lt;p&gt;Como primer ejemplo se parte de una matriz con tres filas y tres columnas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat &amp;lt;- matrix(c(2, 4, 6, 7, 8, 9, 1, 12, 21), nrow = 3, ncol = 3)
mat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    2    7    1
## [2,]    4    8   12
## [3,]    6    9   21&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se desea, por ejemplo, obtener la suma de cada columna puede usarse la función &lt;code&gt;apply()&lt;/code&gt; de la siguiente manera.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(mat, 2, sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12 24 34&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bien, puede calcularse si se desea el promedio de cada una de las filas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(mat, 1, mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  3.333333  8.000000 12.000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existen además algunas funciones ya programadas en el paquete &lt;code&gt;base&lt;/code&gt; de R que replican rápidamente los resultados anteriores. Por ejemplo está la función &lt;code&gt;colSums()&lt;/code&gt; para calcular la cuma de cada columna, y &lt;code&gt;rowMeans()&lt;/code&gt; para obtener la media aritmética de cada fila.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colSums(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12 24 34&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rowMeans(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  3.333333  8.000000 12.000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los dos casos mostrados anteriormente ejemplifican un uso básico de la función &lt;code&gt;apply()&lt;/code&gt;, sin embargo, esta función es mucho más potente y es capaz de trabajar de manera multidimensional. Consideremos, por ejemplo, un objeto en dos dimensiones (filas y columnas) similar al creado con anterioridad, es decir, una matriz.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mat2 &amp;lt;- matrix(1:9, nrow = 3, ncol = 3)
mat2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El objeto &lt;code&gt;mat2&lt;/code&gt; representa un caso particular de lo que en R se conoce como arreglos, los cuales pueden ser creados mediante la función &lt;code&gt;array()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;array(data=1:9, dim = c(3,3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función &lt;code&gt;array()&lt;/code&gt; también permite agregar etiquetas a las filas y las columnas mediante su argumento &lt;code&gt;dimnames&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nombres.columnas &amp;lt;- c(&amp;quot;COL1&amp;quot;,&amp;quot;COL2&amp;quot;,&amp;quot;COL3&amp;quot;)
nombres.filas &amp;lt;- c(&amp;quot;FILA1&amp;quot;,&amp;quot;FILA2&amp;quot;,&amp;quot;FILA3&amp;quot;)
arreglo &amp;lt;- array(data=1:9, dim = c(3,3), 
                 dimnames = list(nombres.columnas, nombres.filas))
arreglo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      FILA1 FILA2 FILA3
## COL1     1     4     7
## COL2     2     5     8
## COL3     3     6     9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pueden agregarse varias dimensiones a los arreglos. Para esto, supongamos que se desean tener las siguientes dimensiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DIM1: Números del 1 al 9.&lt;/li&gt;
&lt;li&gt;DIM2: Números del 1 al 9 multiplicados por 10.&lt;/li&gt;
&lt;li&gt;DIM3: Números del 1 al 9 multiplicados por 100.&lt;/li&gt;
&lt;li&gt;DIM4: Números del 1 al 9 multiplicados por 1000.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una forma de generar el arreglo anterior es mediante el siguiente código:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nombres.dimensiones &amp;lt;- c(&amp;quot;DIM1&amp;quot;,&amp;quot;DIM2&amp;quot;,&amp;quot;DIM3&amp;quot;,&amp;quot;DIM4&amp;quot;)
arreglo &amp;lt;- array(data = c(seq(from=1, to=9, by=1),           #1 al 9
                          seq(from=10, to=90, by=10),        #10 al 90
                          seq(from=100, to=900, by=100),     #100 al 900
                          seq(from=1000, to=9000, by=1000)), #1000 al 9000
                 dim = c(3, 3, 4),                           #3 filas, 3 columnas y 4 dimensiones
                 dimnames = list(nombres.filas,
                                 nombres.columnas,
                                 nombres.dimensiones))
arreglo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , DIM1
## 
##       COL1 COL2 COL3
## FILA1    1    4    7
## FILA2    2    5    8
## FILA3    3    6    9
## 
## , , DIM2
## 
##       COL1 COL2 COL3
## FILA1   10   40   70
## FILA2   20   50   80
## FILA3   30   60   90
## 
## , , DIM3
## 
##       COL1 COL2 COL3
## FILA1  100  400  700
## FILA2  200  500  800
## FILA3  300  600  900
## 
## , , DIM4
## 
##       COL1 COL2 COL3
## FILA1 1000 4000 7000
## FILA2 2000 5000 8000
## FILA3 3000 6000 9000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Partiendo del arreglo anterior, supongamos que se desea obtener de cada dimensión el valor máximo por filas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(arreglo, c(3,1), max)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      FILA1 FILA2 FILA3
## DIM1     7     8     9
## DIM2    70    80    90
## DIM3   700   800   900
## DIM4  7000  8000  9000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bien, quizás interese obtener de cada dimensión el valor máximo de cada columna.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(arreglo, c(3,2), max)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      COL1 COL2 COL3
## DIM1    3    6    9
## DIM2   30   60   90
## DIM3  300  600  900
## DIM4 3000 6000 9000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El siguiente resultado muestra el mínimo de cada columna en cada dimensión.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apply(arreglo, c(2,3), min)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      DIM1 DIM2 DIM3 DIM4
## COL1    1   10  100 1000
## COL2    4   40  400 4000
## COL3    7   70  700 7000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los ejemplos anteriores pueden ser aplicados a un número mayor de dimensiones, para ello basta con tener un arreglo adecuado y operar sobre los márgenes correspondientes con la función &lt;code&gt;apply()&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
