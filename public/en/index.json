[{"authors":["admin"],"categories":null,"content":"Born in San José, Costa Rica in 1989, César Gamboa is a Statistician graduated from the School of Statistics of University of Costa Rica. Professor of Probability and Statistics, in addition to programming in the R language, he is also a demographic researcher dedicated to the use of algorithms for optimization and analysis by through computer simulations.\nRecognized for his capacity for statistical analysis, software and programming languages management for data analysis such as R, Python, and Git. Versatile for the automation of processes through specialized algorithms, analytical and mathematical capacity and the ability for self-taught learning.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/en/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/en/authors/admin/","section":"authors","summary":"Born in San José, Costa Rica in 1989, César Gamboa is a Statistician graduated from the School of Statistics of University of Costa Rica. Professor of Probability and Statistics, in addition to programming in the R language, he is also a demographic researcher dedicated to the use of algorithms for optimization and analysis by through computer simulations.\nRecognized for his capacity for statistical analysis, software and programming languages management for data analysis such as R, Python, and Git.","tags":null,"title":"César Gamboa Sanabria","type":"authors"},{"authors":[],"categories":null,"content":"","date":1575565200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575565200,"objectID":"2e34d83274df9ffdcda028217aefdcaa","permalink":"/en/talk/cursor202001/","publishdate":"2019-12-05T17:00:00Z","relpermalink":"/en/talk/cursor202001/","section":"talk","summary":"This course consists of sixteen hours, divided into four sessions of four hours each. The purpose of the course is to provide the student with the starting point to use the R programming language. By using this language, the student can read and create data, manipulate objects, generate different types of data visualization, and obtain basic statistics.","tags":[],"title":"R Programming","type":"talk"},{"authors":["César Gamboa Sanabria"],"categories":["R basics"],"content":"\rIn this second part of the post series on the apply family of functions, it is the tapply() function. Unlike the apply () function discussed in the first post, the tapply() function is often used to apply a function to subsets of a vector. Usually, when working with databases, there are variables of different nature, some can be numerical, others categorical, the idea of tapply() is to obtain summaries of a vector but being grouped concerning other vectors (variables).\nOn this occasion, we will use the starwars database seen in the post on the inspectdf package again.\nIf we need to know the average height of the characters, execute the following command.\nmean(starwars$height, na.rm = TRUE)\r## [1] 174.358\rHowever, it is more valuable to obtain the average height according to another variable of interest that allows us to make some comparison, such as gender. For this, we can use the tapply() function.\ntapply(X=starwars$height, INDEX=starwars$gender, FUN=mean) \r## female hermaphrodite male none ## NA 175 NA NA\rThe NA that appear are due to missing values within the database, so the mean() function does not calculate the average correctly unless an imputation of these missing values is made or indicated that the mean() function must omit the missing values using the argument na.rm = TRUE. In most of the apply family functions, the arguments that belong to the function being applied (in this case mean()) must go after the FUN argument.\ntapply(X=starwars$height, INDEX=starwars$gender,\rFUN=mean, na.rm=TRUE) \r## female hermaphrodite male none ## 165.4706 175.0000 179.2373 200.0000\rThe tapply() function is not limited to a single grouping variable. The same “dimensions” concept that we discuss in the apply () function can be used to tapply(), but this time the grouping variables must be specified within a list. As an example, suppose we are interested in the average height according to gender and eye color.\ntapply(X=starwars$height,\rINDEX=list(starwars$eye_color, starwars$gender), FUN=mean, na.rm=TRUE)\r## female hermaphrodite male none\r## black 195.5 NA 182.0000 NaN\r## blue 167.0 NA 189.2308 NA\r## blue-gray NA NA 182.0000 NA\r## brown 160.0 NA 168.5000 NA\r## dark NA NA NaN NA\r## gold NA NA 191.0000 NA\r## green, yellow NA NA 216.0000 NA\r## hazel 178.0 NA 170.0000 NA\r## orange NA 175 181.2857 NA\r## pink NA NA 180.0000 NA\r## red NA NA 190.5000 200\r## red, blue 96.0 NA NA NA\r## unknown NaN NA 136.0000 NA\r## white 178.0 NA NA NA\r## yellow 168.0 NA 180.1111 NA\rWe can add more grouping variables, but all of them must be within the list. For example, it is possible to grouping also by the skin color, although in this case, the result would show many missing values because not all combinations exist. That is a demonstration that each time we grouping variables, these groupings should make sense; otherwise, the analysis will not be useful.\ntapply(X=starwars$height,\rINDEX=list(starwars$eye_color, starwars$gender, starwars$skin_color), FUN=mean, na.rm=TRUE)\r## , , blue\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA 196 NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel 178 NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , blue, grey\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA 115.5 NA\r## ## , , brown\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA 234.0 NA\r## blue-gray NA NA NA NA\r## brown NA NA 129.5 NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA 198.0 NA\r## ## , , brown mottle\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 180 NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , brown, white\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA 216 NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , dark\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue 184 NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA 183.25 NA\r## dark NA NA NaN NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , fair\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue 158.5 NA 181.1250 NA\r## blue-gray NA NA 182.0000 NA\r## brown 163.0 NA 185.3333 NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA 170.0000 NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , fair, green, yellow\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow 168 NA NA NA\r## ## , , gold\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , green\r## ## female hermaphrodite male none\r## black NA NA 184.5 NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA 66.0 NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 206.0 NA\r## pink NA NA NA NA\r## red NA NA 190.0 NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA 183.0 NA\r## ## , , green-tan, brown\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA 175 NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , green, grey\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA 193 NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , grey\r## ## female hermaphrodite male none\r## black 213 NA 198.3333 NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA 191.0000 NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 224.0000 NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , grey, blue\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA 79 NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , grey, green, yellow\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 163 NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , grey, red\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 112 NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , light\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue 165.00 NA 176.5 NA\r## blue-gray NA NA NA NA\r## brown 159.25 NA 185.5 NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NaN NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , metal\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA 200\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , mottled green\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA 191 NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , none\r## ## female hermaphrodite male none\r## black NA NA NA NaN\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , orange\r## ## female hermaphrodite male none\r## black NA NA 188 NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 196 NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , pale\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA 188 NA\r## pink NA NA 180 NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white 178 NA NA NA\r## yellow NA NA 184 NA\r## ## , , red\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA 175 NA\r## ## , , red, blue, white\r## ## female hermaphrodite male none\r## black 178 NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , silver, red\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue 96 NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , tan\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA 187 NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , unknown\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA 228 NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NaN NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , white\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA 233 NA\r## ## , , white, blue\r## ## female hermaphrodite male none\r## black NA NA 122 NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , white, red\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue NA NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r## ## , , yellow\r## ## female hermaphrodite male none\r## black NA NA NA NA\r## blue 168 NA NA NA\r## blue-gray NA NA NA NA\r## brown NA NA NA NA\r## dark NA NA NA NA\r## gold NA NA NA NA\r## green, yellow NA NA NA NA\r## hazel NA NA NA NA\r## orange NA NA NA NA\r## pink NA NA NA NA\r## red NA NA NA NA\r## red, blue NA NA NA NA\r## unknown NA NA NA NA\r## white NA NA NA NA\r## yellow NA NA NA NA\r","date":1564620957,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564620957,"objectID":"550582a0f65965bbdafbc119409b7d46","permalink":"/en/post/2019-07-31-tapply/","publishdate":"2019-07-31T18:55:57-06:00","relpermalink":"/en/post/2019-07-31-tapply/","section":"post","summary":"The tapply function in data analysis.","tags":["R","RStudio","apply family functions","tapply"],"title":"Apply family functions - Part 2","type":"post"},{"authors":["César Gamboa Sanabria"],"categories":["R basics"],"content":"\rThe apply family functions belong to the R base package, they are especially useful when combining their use with functions to manipulate pieces of matrices, arrays, lists and data frames. These functions allow you to cross data in multiple ways to avoid the use of for loops that are usually computationally heavier.\nThe first function we will talk about in this series is the apply () function, which in its simplest form of use is used to evaluate the margins (1 = rows or 2 = columns) of a matrix or an array to apply a function to them.\nAs a first example, we start from a matrix with three rows and three columns.\nmat \u0026lt;- matrix(c(2, 4, 6, 7, 8, 9, 1, 12, 21), nrow = 3, ncol = 3)\rmat\r## [,1] [,2] [,3]\r## [1,] 2 7 1\r## [2,] 4 8 12\r## [3,] 6 9 21\rIf you wish, for example, to obtain the sum of each column, you can use the apply () function as follows.\napply(mat, 2, sum)\r## [1] 12 24 34\rWe can also calculate the average of each row.\napply(mat, 1, mean)\r## [1] 3.333333 8.000000 12.000000\rThere are also some functions already programmed in the R base package that quickly replicate the previous results. For example, there is the colSums () function to calculate the amount of each column, and rowMeans () to obtain the arithmetic mean of each row.\ncolSums(mat)\r## [1] 12 24 34\rrowMeans(mat)\r## [1] 3.333333 8.000000 12.000000\rThe two cases shown above exemplify a basic use of the apply () function, however, this function is much more powerful and is capable of working in a multidimensional way. Consider, for example, an object in two dimensions (rows and columns) similar to the one created previously, that is, an array.\nmat2 \u0026lt;- matrix(1:9, nrow = 3, ncol = 3)\rmat2\r## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\rThe mat2 object represents a particular case of an array, which can be created using thearray ()function.\narray(data=1:9, dim = c(3,3))\r## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\rThe array () function also allows you to add tags to the rows and columns using its dimnames argument.\nnombres.columnas \u0026lt;- c(\u0026quot;COL1\u0026quot;,\u0026quot;COL2\u0026quot;,\u0026quot;COL3\u0026quot;)\rnombres.filas \u0026lt;- c(\u0026quot;FILA1\u0026quot;,\u0026quot;FILA2\u0026quot;,\u0026quot;FILA3\u0026quot;)\rarreglo \u0026lt;- array(data=1:9, dim = c(3,3), dimnames = list(nombres.columnas, nombres.filas))\rarreglo\r## FILA1 FILA2 FILA3\r## COL1 1 4 7\r## COL2 2 5 8\r## COL3 3 6 9\rWe can add multiple dimensions to an array. For this, suppose you want to have the following sizes:\n\rDIM1: Numbers from 1 to 9.\rDIM2: Numbers from 1 to 9 multiplied by 10.\rDIM3: Numbers from 1 to 9 multiplied by 100.\rDIM4: Numbers from 1 to 9 increased by 1000.\r\rOne way to generate the previous arrangement is by using the following code:\nnombres.dimensiones \u0026lt;- c(\u0026quot;DIM1\u0026quot;,\u0026quot;DIM2\u0026quot;,\u0026quot;DIM3\u0026quot;,\u0026quot;DIM4\u0026quot;)\rarreglo \u0026lt;- array(data = c(seq(from=1, to=9, by=1), #1 al 9\rseq(from=10, to=90, by=10), #10 al 90\rseq(from=100, to=900, by=100), #100 al 900\rseq(from=1000, to=9000, by=1000)), #1000 al 9000\rdim = c(3, 3, 4), #3 filas, 3 columnas y 4 dimensiones\rdimnames = list(nombres.filas,\rnombres.columnas,\rnombres.dimensiones))\rarreglo\r## , , DIM1\r## ## COL1 COL2 COL3\r## FILA1 1 4 7\r## FILA2 2 5 8\r## FILA3 3 6 9\r## ## , , DIM2\r## ## COL1 COL2 COL3\r## FILA1 10 40 70\r## FILA2 20 50 80\r## FILA3 30 60 90\r## ## , , DIM3\r## ## COL1 COL2 COL3\r## FILA1 100 400 700\r## FILA2 200 500 800\r## FILA3 300 600 900\r## ## , , DIM4\r## ## COL1 COL2 COL3\r## FILA1 1000 4000 7000\r## FILA2 2000 5000 8000\r## FILA3 3000 6000 9000\rStarting from the previous array, suppose that you want to obtain the maximum value per row from each dimension.\napply(arreglo, c(3,1), max)\r## FILA1 FILA2 FILA3\r## DIM1 7 8 9\r## DIM2 70 80 90\r## DIM3 700 800 900\r## DIM4 7000 8000 9000\rOr, you may want to obtain the maximum value of each column from each dimension.\napply(arreglo, c(3,2), max)\r## COL1 COL2 COL3\r## DIM1 3 6 9\r## DIM2 30 60 90\r## DIM3 300 600 900\r## DIM4 3000 6000 9000\rThe following result shows the minimum of each column in each dimension.\napply(arreglo, c(2,3), min)\r## DIM1 DIM2 DIM3 DIM4\r## COL1 1 10 100 1000\r## COL2 4 40 400 4000\r## COL3 7 70 700 7000\rThe previous examples can be applied to arrays with a higher dimension; for this, it is enough to have an adequate arrangement and operate on the corresponding margins with the apply () function.\n","date":1563752529,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563752529,"objectID":"efeebc86a8281ce829d5fdf2cc289855","permalink":"/en/post/2019-06-23-apply/","publishdate":"2019-07-21T17:42:09-06:00","relpermalink":"/en/post/2019-06-23-apply/","section":"post","summary":"The apply function to multidimensional data.","tags":["R","RStudio","apply family functions","apply"],"title":"Apply family functions - Part 1","type":"post"},{"authors":[],"categories":null,"content":"","date":1563296400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563296400,"objectID":"00b35e0c03be0db2559b7f397190efd9","permalink":"/en/talk/cursor201906/","publishdate":"2019-07-16T17:00:00Z","relpermalink":"/en/talk/cursor201906/","section":"talk","summary":"This course consists of sixteen hours, divided into four sessions of four hours each. The purpose of the course is to provide the student with the starting point to use the R programming language. By using this language, the student can read and create data, manipulate objects, generate different types of data visualization, and obtain basic statistics.","tags":[],"title":"R Programming","type":"talk"},{"authors":[],"categories":null,"content":"","date":1561629600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561629600,"objectID":"5a3f2b7f0342293c5b7d091e1ba8ebd3","permalink":"/en/talk/conversatorior/","publishdate":"2019-06-23T00:00:00Z","relpermalink":"/en/talk/conversatorior/","section":"talk","summary":"The School of Statistics is pleased to invite you to the following talks and free workshops that will be taught by Ing Ruiz de R Studio Inc from June 24 to 27, 2019.","tags":[],"title":"R as a tool of statistical analysis","type":"talk"},{"authors":["César Gamboa Sanabria"],"categories":["Exploratory data analysis"],"content":"\rIt is a common task to find datasets which have different types of variables, and they could be numeric, time data, or even categorical. The inspectdf package offers a set of functions to analyze the behavior of this kind of data.\nFirst of all, we have to install the package.\nlibrary(devtools)\rinstall_github(\u0026quot;alastairrushworth/inspectdf\u0026quot;)\rWhen we installed the package, it is necessary to load it. We do the same with dplyr package, especially for use the pipe %\u0026gt;%.\nlibrary(inspectdf)\rlibrary(dplyr)\rFor this example, the dataset starwars will be used. This dataset is in dplyr package and which has data from various characters in this cinematographic universe.\nstarwars %\u0026gt;% head()\r## # A tibble: 6 x 13\r## name height mass hair_color skin_color eye_color birth_year gender\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 Luke~ 172 77 blond fair blue 19 male ## 2 C-3PO 167 75 \u0026lt;NA\u0026gt; gold yellow 112 \u0026lt;NA\u0026gt; ## 3 R2-D2 96 32 \u0026lt;NA\u0026gt; white, bl~ red 33 \u0026lt;NA\u0026gt; ## 4 Dart~ 202 136 none white yellow 41.9 male ## 5 Leia~ 150 49 brown light brown 19 female\r## 6 Owen~ 178 120 brown, gr~ light blue 52 male ## # ... with 5 more variables: homeworld \u0026lt;chr\u0026gt;, species \u0026lt;chr\u0026gt;, films \u0026lt;list\u0026gt;,\r## # vehicles \u0026lt;list\u0026gt;, starships \u0026lt;list\u0026gt;\rTabular exploratory data analysis\rThe inspectdf package allows you to calculate some descriptive statistics quickly for any variable using theinspect_types()function.\nstarwars %\u0026gt;% inspect_types()\r## # A tibble: 4 x 4\r## type cnt pcnt col_name ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 character 7 53.8 \u0026lt;chr [7]\u0026gt;\r## 2 list 3 23.1 \u0026lt;chr [3]\u0026gt;\r## 3 numeric 2 15.4 \u0026lt;chr [2]\u0026gt;\r## 4 integer 1 7.69 \u0026lt;chr [1]\u0026gt;\rThe previous result shows that there are seven variables of type character, which represents 53.84% of the dataset. Also, there are two numerical variables, which represent 15.38%. The above is useful for a first look, but it is interesting to go a little further and describe all the variables in more detail. For this, the inspect_cat () function could be useful.\nstarwars %\u0026gt;% inspect_cat()\r## # A tibble: 7 x 5\r## col_name cnt common common_pcnt levels ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 eye_color 15 brown 24.1 \u0026lt;tibble [15 x 3]\u0026gt;\r## 2 gender 5 male 71.3 \u0026lt;tibble [5 x 3]\u0026gt; ## 3 hair_color 13 none 42.5 \u0026lt;tibble [13 x 3]\u0026gt;\r## 4 homeworld 49 Naboo 12.6 \u0026lt;tibble [49 x 3]\u0026gt;\r## 5 name 87 Ackbar 1.15 \u0026lt;tibble [87 x 3]\u0026gt;\r## 6 skin_color 31 fair 19.5 \u0026lt;tibble [31 x 3]\u0026gt;\r## 7 species 38 Human 40.2 \u0026lt;tibble [38 x 3]\u0026gt;\rThe inspect_cat () function shows in the first column the name of the variable, in the second one the number of unique values it contains, that is, the variable * eye_color * has 15 different levels, or what is the same, there are 15 colors and different eyes in the database. The third column shows the most common value that appears in the variable; for example, the most common species that appear in the dataset are humans. The fourth column indicates the percentage that represents the most common level; for example, the brown eyes represent 24.13% of all the colors present in the data. So what does the fifth column represent? Well, it is a list with the proportions of each level of the variable. Consider the * df * object from the previous result.\ndf \u0026lt;- starwars %\u0026gt;% inspect_cat()\rdf$levels$eye_color\r## # A tibble: 15 x 3\r## value prop cnt\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 brown 0.241 21\r## 2 blue 0.218 19\r## 3 yellow 0.126 11\r## 4 black 0.115 10\r## 5 orange 0.0920 8\r## 6 red 0.0575 5\r## 7 hazel 0.0345 3\r## 8 unknown 0.0345 3\r## 9 blue-gray 0.0115 1\r## 10 dark 0.0115 1\r## 11 gold 0.0115 1\r## 12 green, yellow 0.0115 1\r## 13 pink 0.0115 1\r## 14 red, blue 0.0115 1\r## 15 white 0.0115 1\rThe table above shows the proportion of each eye color. The same applies to any of the other variables.\n\rGraphical exploratory data analysis\rSometimes the numerical values are not easy to interpret it, either due to a quantity of data or due to visual issues. The inspectdf package also graphically allows for exploratory data analysis.\ndf %\u0026gt;% show_plot()\rThe previous result contains the same information as the df object, but now it is easier, faster, and even easier to interpret. However, this result can be improved, because the variable * name * does not work much in the graph because all the names are different. It can solve by modifying the argument high_cardinality, which means that only those categories that appear a certain number of times say four will be in the plot.\ndf %\u0026gt;% show_plot(high_cardinality = 4)\rFinally, if the colors are not entirely pleasant, they can be manipulated through the five color palettes offered by the package, we only have to modify the col_palette argument with numbers between one and five to achieve this.\ndf %\u0026gt;% show_plot(high_cardinality = 4, col_palette = 4)\rdf %\u0026gt;% show_plot(high_cardinality = 4, col_palette = 5)\r\r","date":1561318929,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561318929,"objectID":"510550bc8ea3cd0c8be33b7eaa853538","permalink":"/en/post/2019-06-23-exploraci%C3%B3n-de-datos-categ%C3%B3ricos-con-el-paquete-inspectdf/","publishdate":"2019-06-23T13:42:09-06:00","relpermalink":"/en/post/2019-06-23-exploraci%C3%B3n-de-datos-categ%C3%B3ricos-con-el-paquete-inspectdf/","section":"post","summary":"This post follows to show how to use the inspectdf package for data analysis","tags":["R","RStudio","Exploratory data analysis","Descriptive","Categorical data"],"title":"Exploratory data analysis with categorical data","type":"post"},{"authors":null,"categories":null,"content":"This is a \u0026ldquo;hello world\u0026rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.\n","date":1462510131,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1462510131,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"/en/about/","publishdate":"2016-05-05T21:48:51-07:00","relpermalink":"/en/about/","section":"","summary":"This is a \u0026ldquo;hello world\u0026rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.","tags":null,"title":"About","type":"page"}]